AWSTemplateFormatVersion: "2010-09-09"
Description: Day 30 - Final Project: 3-Tier Web App (S3 + API Gateway + Lambda + DynamoDB)

Resources:
  ### Frontend - S3 Website ###
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: day30-frontend-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      AccessControl: PublicRead

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*

  ### Database - DynamoDB ###
  AppDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Day30Items
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### IAM Role for Lambda ###
  AppLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ### Lambda Function ###
  AppLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Day30AppLambda
      Handler: index.handler
      Role: !GetAtt AppLambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import json, boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('Day30Items')
          def handler(event, context):
              method = event.get("httpMethod", "")
              if method == "POST":
                  body = json.loads(event["body"])
                  table.put_item(Item={"id": body["id"], "value": body["value"]})
                  return {"statusCode": 200, "body": json.dumps("Item added")}
              elif method == "GET":
                  item_id = event["queryStringParameters"]["id"]
                  resp = table.get_item(Key={"id": item_id})
                  return {"statusCode": 200, "body": json.dumps(resp.get("Item", {}))}
              return {"statusCode": 400, "body": json.dumps("Bad request")}

  ### API Gateway ###
  AppApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Day30Api

  AppApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt AppApiGateway.RootResourceId
      PathPart: items
      RestApiId: !Ref AppApiGateway

  AppApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AppApiGateway
      ResourceId: !Ref AppApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AppLambdaFunction.Arn}/invocations

  AppLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AppLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AppApiGateway}/*/*

  ### Monitoring - CloudWatch Alarm ###
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Day30LambdaErrorAlarm
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref AppLambdaFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmDescription: Alarm if Lambda has any errors in last minute

Outputs:
  FrontendURL:
    Description: Public URL for frontend website
    Value: !GetAtt FrontendBucket.WebsiteURL

  ApiEndpoint:
    Description: API Gateway endpoint
    Value: !Sub https://${AppApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/items

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref AppDynamoDBTable
